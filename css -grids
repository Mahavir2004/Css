/* Define the container element as a grid */
.container {
  display: grid; /* This enables the grid layout for the container element */
  
  /* Define the number and size of the columns in the grid */
  grid-template-columns: 120px 100px; /* Creates two columns: one with 120px and the other with 100px width */
  
  /* Define the number and size of the rows in the grid */
  grid-template-rows: 120px 100px; /* Creates two rows: one with 120px and the other with 100px height */
  
  /* Create grid gaps (space between rows and columns) */
  grid-gap: 10px; /* Sets a 10px space between the rows and columns (can be written as 'gap' as shorthand) */
  
  /* Alternative way to set gaps for rows and columns */
  grid-row-gap: 10px; /* Adds 10px gap between rows */
  grid-column-gap: 10px; /* Adds 10px gap between columns */
  
  /* Define the overall size of the grid area */
  grid-template-areas: "header header" "main sidebar" "footer footer"; 
  /* This defines grid areas by name and can be used to place items explicitly in the grid */
}

/* Define styles for the items inside the grid */
.items {
  /* General grid item properties will go here */
}

/* Define a specific item with grid positioning */
.item-4 {
  grid-row: 1 / 2; /* Starts at row 1 and ends at row 2 (this covers one row) */
  grid-column: 1 / 2; /* Starts at column 1 and ends at column 2 (this covers one column) */
  
  /* Alternative syntax for positioning grid items using start and end properties */
  grid-row-start: 1; /* Specifies where the item starts on the row axis */
  grid-row-end: 2; /* Specifies where the item ends on the row axis */
  grid-column-start: 1; /* Specifies where the item starts on the column axis */
  grid-column-end: 2; /* Specifies where the item ends on the column axis */
  
  /* Placing an item into a specific grid area */
  grid-area: header; /* This positions the item into the grid area defined by name */
}

/* Example of defining more grid properties: */
.container {
  /* Create a responsive grid with different columns on different screen sizes */
  grid-template-columns: repeat(3, 1fr); /* Creates three equal-width columns using 'fr' unit (fractional units) */
  
  /* Define rows in a similar way with fractional units */
  grid-template-rows: 100px auto; /* First row is 100px high, second row automatically takes the remaining height */
  
  /* Define multiple grid areas */
  grid-template-areas: "header header header" "sidebar main content" "footer footer footer"; /* Example layout with grid areas */
}

/* Aligning and justifying grid content */
.container {
  justify-items: center; /* Aligns grid items horizontally to the center of their respective grid areas */
  align-items: center; /* Aligns grid items vertically to the center of their respective grid areas */
  justify-content: center; /* Aligns the entire grid to the center horizontally */
  align-content: center; /* Aligns the entire grid to the center vertically */
}

/* Grid Auto-Placement (when items don't explicitly have grid positions) */
.container {
  grid-auto-rows: 150px; /* Automatically sets the height of rows to 150px if not explicitly defined */
  grid-auto-columns: 100px; /* Automatically sets the width of columns to 100px if not explicitly defined */
  grid-auto-flow: row; /* Controls the auto-placement behavior of items. 'row' places items in rows, 'column' places items in columns */
}

/* Example of creating nested grids */
.nested-grid {
  display: grid; /* Nested grid inside another grid */
  grid-template-columns: 1fr 2fr; /* Defines two columns with different proportions */
}

/* Positioning grid items */
.item-1 {
  grid-column: 1 / 2; /* Item spans from column 1 to column 2 */
  grid-row: 1 / 3; /* Item spans from row 1 to row 3 */
}

/* Setting grid gap shorthand */
.container {
  gap: 20px; /* Sets both row and column gaps to 20px */
}

/* Responsive grid layout example */
@media (max-width: 600px) {
  .container {
    grid-template-columns: 1fr; /* One column grid when screen size is below 600px */
  }
}
